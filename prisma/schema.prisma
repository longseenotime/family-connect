generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  role          String     @default("member")
  familyId      String?
  createdAt     DateTime   @default(now())
  accounts      Account[]
  sessions      Session[]
  family        Family?    @relation(fields: [familyId], references: [id])
  posts         Post[]
  events        Event[]
  trips         Trip[]
  tripVotes     TripVote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Family {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  members     User[]
  events      Event[]
  posts       Post[]
  albums      Album[]
  trips       Trip[]
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime?
  location    String?
  createdAt   DateTime @default(now())
  familyId    String
  createdById String
  family      Family   @relation(fields: [familyId], references: [id])
  createdBy   User     @relation(fields: [createdById], references: [id])
}

model Post {
  id          String   @id @default(cuid())
  title       String
  content     String
  createdAt   DateTime @default(now())
  familyId    String
  authorId    String
  family      Family   @relation(fields: [familyId], references: [id])
  author      User     @relation(fields: [authorId], references: [id])
}

model Album {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  familyId    String
  family      Family   @relation(fields: [familyId], references: [id])
  photos      Photo[]
}

model Photo {
  id          String   @id @default(cuid())
  filename    String
  url         String
  caption     String?
  createdAt   DateTime @default(now())
  albumId     String
  album       Album    @relation(fields: [albumId], references: [id])
}

model Trip {
  id          String         @id @default(cuid())
  title       String
  description String?
  status      TripStatus     @default(VOTING)
  budget      String?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime       @default(now())
  voteDeadline DateTime?
  familyId    String
  createdById String
  family      Family         @relation(fields: [familyId], references: [id])
  createdBy   User           @relation(fields: [createdById], references: [id])
  destinations TripDestination[]
  votes       TripVote[]
}

model TripDestination {
  id          String   @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  isSelected  Boolean  @default(false)
  tripId      String
  trip        Trip     @relation(fields: [tripId], references: [id])
  votes       TripVote[]
}

model TripVote {
  id          String          @id @default(cuid())
  createdAt   DateTime        @default(now())
  userId      String
  tripId      String
  destinationId String
  user        User            @relation(fields: [userId], references: [id])
  trip        Trip            @relation(fields: [tripId], references: [id])
  destination TripDestination @relation(fields: [destinationId], references: [id])
  
  @@unique([userId, tripId])
}

enum TripStatus {
  VOTING
  PLANNING
  CONFIRMED
  COMPLETED
  CANCELLED
}